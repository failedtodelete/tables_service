<?php

namespace Tests;

use App\Models\User;
use \Illuminate\Foundation\Testing\TestResponse;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Laravel\Passport\Passport;

abstract class TestCase extends BaseTestCase
{

    use CreatesApplication;

    /**
     * Auth user;
     * @var
     */
    protected $authAdminSeed = false;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // Сброс таблиц базы данных.
        $this->artisan("migrate:reset");

        // Удаление таблицы @migrations
        Schema::dropIfExists('migrations');

        // Создание и регистрация таблицы @migrations
        if (!Schema::hasTable ("migrations")) $this->artisan("migrate:install");

        // Накатываение миграций.
        $this->artisan("migrate");

        $this->artisan('db:seed --class=Roles');

        // Удаление всех свзяей между ролями и разрешениями.
        DB::table('permission_role')->truncate();
    }

    /**
     * Отправка запроса на сервер
     * Если в массив $options передать auth = true,
     * запрос пойдет в маркером токена доступа аутентифицированного пользователя.
     * @param $method
     * @param $uri
     * @param array $data
     * @param array $headers
     * @param array $options
     * @return TestResponse
     */
    public function ajax($method, $uri, $data = [], $headers = [], $options = [])
    {
        // Установка необходимых заголовков в запрос.
        $headers['X-Requested-With'] = 'XMLHttpRequest';
        $headers['Accept'] = 'application/json';

        // Внедрение Bearer ключа аутентифицированного пользователя.
        if (key_exists('auth', $options) || key_exists('auth_current', $options)) {
            if (key_exists('auth', $options) && mb_strlen($options['auth'])) $auth = $this->auth($options['auth']);
            else if (key_exists('auth_current', $options) && gettype($options['auth_current']) == 'integer') {
                $auth = $this->auth_current($options['auth_current']);
            }
            $headers['Authorization'] = 'Bearer ' .$auth->api_token;
        }

        return $this->withHeaders($headers)->json($method, $uri, $data);
    }

    /**
     * Получение аутентифицированного пользователя.
     * @param $roleOrPermission
     * @return mixed|null
     */
    protected function auth($roleOrPermission)
    {

        // Модель пользователя, созданного через factory.
        $user = null;

        // Использование обратного значения.
        // Еесли первый символ роли или разрешения начинается со знака "!" используется обратное значение.
        $opposite_value = false;
        if ($roleOrPermission[0] == '!') {
            $roleOrPermission = substr($roleOrPermission, '1', strlen($roleOrPermission) - 1);
            $opposite_value = true;
        }

        // Опредение роли или разрешения.
        // Если получен массив из нескольких слов - это разрешение, иначе - роль.
        $arr = explode('.', $roleOrPermission);

        // Удаление всех свзяей между ролями и разрешениями.
        DB::table('permission_role')->truncate();

        if (count($arr) > 1) {

            // Получено разрешение.
            // Поиск роли, которое имеет или не имеет текущее разрешение на основе обратного значения.
            $permission = DB::table('permissions')->where('name', $roleOrPermission)->first();
            $role = DB::table('permissions')->first();
            if (!$opposite_value) {
                DB::table('permission_role')->insert(['permission_id' => $permission->id, 'role_id' => $role->id]);
            }

        } else {

            // Получена роль.
            // Получение роли на основе обратного значения.
            if (!$opposite_value) {
                $role = DB::table('roles')->where('name', '=', $roleOrPermission)->first();
            } else {
                $role = DB::table('roles')->where('name', '!=', $roleOrPermission)->first();
            }

        }

        // Создание пользовалея с текущей ролью.
        $user = factory(User::class)->create(['role_id' => $role->id]);

        // Аутентификация пользователя для доступа токена.
        Passport::actingAs($user);

        return $user;
    }

    /**
     * Получение текущего пользователя.
     * @param $id
     * @return \Illuminate\Database\Query\Builder|mixed
     */
    protected function auth_current($id)
    {
        // Получение пользователя.
        $data = DB::table('users')->find($id);
        $user = User::findOrFail($data->id);

        // Аутентификация пользователя для доступа токена.
        Passport::actingAs($user);
        return $user;
    }

}
